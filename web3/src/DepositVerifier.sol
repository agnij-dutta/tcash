// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {IVerifier} from "./interfaces/IVerifier.sol";

/**
 * @title DepositVerifier
 * @dev Mock deposit verifier for MVP testing
 * In production, this will be generated by snarkjs from the deposit circuit
 * For now, we implement a simple mock that validates structure
 */
contract DepositVerifier is IVerifier {
    /**
     * @dev Verify a deposit proof
     * @param proof The zk-SNARK proof (8 field elements for Groth16)
     * @param publicInputs Array of public inputs: [commitment, token, denominationId]
     * @return true if proof is valid, false otherwise
     */
    function verifyProof(
        bytes calldata proof,
        uint256[] calldata publicInputs
    ) external pure override returns (bool) {
        // MVP: Basic validation without actual proof verification
        // This allows us to test the integration while circuit build is being fixed
        
        // Check proof length (Groth16 proof should be 8 * 32 = 256 bytes)
        if (proof.length != 256) {
            return false;
        }
        
        // Check public inputs length (commitment, token, denominationId)
        if (publicInputs.length != 3) {
            return false;
        }
        
        // Check that commitment is non-zero
        if (publicInputs[0] == 0) {
            return false;
        }
        
        // Check that token address is valid (non-zero for now)
        if (publicInputs[1] == 0) {
            return false;
        }
        
        // Check that denominationId is reasonable (< 1000 for MVP)
        if (publicInputs[2] >= 1000) {
            return false;
        }
        
        // Mock verification: always return true for valid structure
        // TODO: Replace with actual Groth16 verification once circuit is built
        return true;
    }
}